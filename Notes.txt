
                ***  Design Patterns ***

Def: Well defined solutions to the common s/w design problems

Types:
    1. Creational : How and where an object will be created.
    2. Structural : How well classes are structured.
    3. Behavioral : How do classes interact with each other.


Creational Design pattern:

Singleton: Ensure at max only one instance of a class can be created

Why:
    1. Control access to some shared resource (eg database/file)
    2. Creation of an object is expensive & makes no sense in creating multiple instances (no parameters)
    3. Provide a global access point to that instance.

Solution:
    1. Make the default constructor to be private to prevent other objects from using the 'new' operator
       with the singleton class.
    2. Create a static creation method that acts as a constructor. This method calls the private constructor
       to create an object and saves it in a static field. All the following calls to this method return
       the cached object.

For multi threaded solution:
    case 1: use of locks:

        lock() {
            if(instance == null) {
                instance = new singleton()
            }
            return instance
        }

    Issues: In this case, even after having proper instance value, the threads will still be locked
    and will work as single threaded.

    case 2: use of double checking lock:

        // This conditional is needed to prevent threads stumbling over the lock one the instance is ready
        if(instance == null) {
            // Now, imagine that the program has just been launched. Since
            // there's no Singleton instance yet, multiple threads can
            // simultaneously pass the previous conditional and reach this
            // point almost at the same time. The first of them will acquire
            // lock and will proceed further, while the rest will wait here.
            lock() {
                // The first thread to acquire the lock, reaches this
                // conditional, goes inside and creates the Singleton
                // instance. Once it leaves the lock block, a thread that
                // might have been waiting for the lock release may then
                // enter this section. But since the Singleton field is
                // already initialized, the thread won't create a new
                // object.
                if(instance == null) {
                    instance = new singleton()
                }
            }
        }
        return instance

